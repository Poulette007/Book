#include "myFunction.h"
void perfectTurnLeft()
{
    dualMotorSpeed(-0.25, -0.25, 250);
    dualMotorSpeed(-0.25, 0.25, 2075);
    dualMotorSpeed(0.25, 0.25, 375);
    stopAll();
    robotAngle = 270;
}

void perfectTurnRight()
{
    dualMotorSpeed(-0.25, -0.25, 250);
    dualMotorSpeed(0.25, -0.25, 2100);
    dualMotorSpeed(0.25, 0.25, 375);
    stopAll();
    robotAngle = 90;
}
void moveOneBlockForward(int firstMotor)
{
    if (!IsWall())
    {
        Serial.println("no wall");
        Serial.println(findIFromPos(robotX, robotY));
        //dualMotorSpeed(0.25, 0.25, PULSES_PER_BLOCK);
        dualMotorRatio(0.25, PULSES_PER_BLOCK, firstMotor);
        stopAll();
    }
    else
    {
        Serial.println("wall");
        if (robotAngle == 270)
            perfectTurnRight();
        else if (robotAngle == 90)
            perfectTurnLeft();
        robotAngle = 0;
        ChangeParours();
    }
}
void ChangeParours()
{
    bool parcourChange = false;
    int id = findIFromPos(robotX, robotY);
    Serial.println("my position");
    if (robotY <= 0)
    {
        for (int i = 0; i < NOMBRE_DE_PARCOURS; i++)
        {
            if (parcours[i * 2][1] == currentParcourX[1])
            {
                possibleParcour[i] = -1;
            }
        }

        startFromI(-1, currentParcourX, currentParoursY);
        Serial.print("come back to index (1, 0) with id : ");
        Serial.println(findIFromPos(robotX, robotY));
        possibleParcour[currentParcour - 1] = -1;

        for (int i = 0; i < NOMBRE_DE_PARCOURS; i++)
        {
            if (possibleParcour[i] != -1)
            {
                Serial.println(possibleParcour[i]);
                for (int k = 0; k < TAILLE_MAX_DU_PARCOURS; k++)
                {
                    currentParcourX[k] = parcours[2][k];
                    currentParoursY[k] = parcours[3][k];
                    Serial.print(currentParcourX[k]);
                    Serial.print(",");
                    Serial.print(currentParoursY[k]);
                    Serial.print("--");
                }
                currentParcour = i + 1;
                return;
            }
        }
    }
    else
    {
        bool isPathPossible = true;
        possibleParcour[currentParcour - 1] = -1;
        Serial.println("y > 0");
        for (int i = 0; i < NOMBRE_DE_PARCOURS; i++)
        {
            isPathPossible = true;
            if (possibleParcour[i] != -1)
            {
                for (int j = 0; j <= id; j++)
                {
                    if (parcours[i * 2][j] != currentParcourX[j])
                    {
                        possibleParcour[i] = -1;
                        isPathPossible = false;
                    }
                    if (j == id && parcourChange == false && isPathPossible)
                    {
                        currentParcour = i + 1;
                        parcourChange = true;
                        for (int k = 0; k < TAILLE_MAX_DU_PARCOURS; k++)
                        {
                            currentParcourX[k] = parcours[i * 2][k];
                            currentParoursY[k] = parcours[i * 2 + 1][k];
                        }
                    }
                }
            }
        }
    }
}
void dualMotorRatio(float speed, int maxPulses, int firstMotor)
{
    bool isDone = false;
    float speedLeft = speed * 0.985;
    float speedRight = speed;

    while (!isDone)
    {
        if (abs(ENCODER_Read(0)) > maxPulses && abs(ENCODER_Read(1)) > maxPulses)
        {
            ENCODER_Reset(0);
            ENCODER_Reset(1);
            isDone = true;
            Serial.println("dualMotorRatio -- isDone");
        }

        // if (abs(ENCODER_Read(0)) > abs(ENCODER_Read(1)))
        // {
        //     speedLeft = speedLeft * 0.999;
        //     // Serial.println(speedLeft);
        // }
        // if (abs(ENCODER_Read(0)) < abs(ENCODER_Read(1)))
        // {
        //     speedLeft = speedLeft * 1.001;
        //     // Serial.println(speedLeft);
        // }

          if(firstMotor == 0) {
              if(abs(ENCODER_Read(0)) <= maxPulses) {
                  MOTOR_SetSpeed(0, speedLeft);
              } else {
                  MOTOR_SetSpeed(0, 0);
              }
              if(abs(ENCODER_Read(1)) <= maxPulses) {
                  MOTOR_SetSpeed(1, speedRight);
              } else {
                  MOTOR_SetSpeed(1, 0);
              }
          }

        if (firstMotor == 1)
        {
            if (abs(ENCODER_Read(1)) <= maxPulses)
            {
                MOTOR_SetSpeed(1, speedRight);
            }
            else
            {
                MOTOR_SetSpeed(1, 0);
            }
            if (abs(ENCODER_Read(0)) <= maxPulses)
            {
                MOTOR_SetSpeed(0, speedLeft);
            }
            else
            {
                MOTOR_SetSpeed(0, 0);
            }
        }
    }
}

int findIFromPos(int x, int y)
{
    for (int i = 0; i < TAILLE_MAX_DU_PARCOURS; i++)
    {
        if (currentParcourX[i] == x && currentParoursY[i] == y)
        {
            return i;
        }
    }
    return -1;
}
bool IsWall()
{
    bool verif;
    if (analogRead(A1) < 200 && analogRead(A0) < 200)
    {
        verif = true;
    }
    else
    {
        verif = false;
    }
    return verif;
}
int arr_length(int parkour[])
{
    int i;
    int count = 0;
    for (i = 0; parkour[i] != '\0'; i++)
    {
        count++;
    }
    return count;
}
void stopAll()
{
    MOTOR_SetSpeed(0, 0);
    MOTOR_SetSpeed(1, 0);
    delay(100);
}
void dualMotorSpeed(float speedLeft, float speedRight, int maxPulses)
{
    bool isDone = false;

    while (!isDone)
    {
        if (abs(ENCODER_Read(0)) > maxPulses && abs(ENCODER_Read(1)) > maxPulses)
        {
            ENCODER_Reset(0);
            ENCODER_Reset(1);
            isDone = true;
        }
        if (abs(ENCODER_Read(0)) <= maxPulses)
        {
            MOTOR_SetSpeed(0, speedLeft);
        }
        else
        {
            MOTOR_SetSpeed(0, 0);
        }
        if (abs(ENCODER_Read(1)) <= maxPulses)
        {
            MOTOR_SetSpeed(1, speedRight);
        }
        else
        {
            MOTOR_SetSpeed(1, 0);
        }
    }
}

void startFromI(int pos, int parcourX[], int parcourY[])
{
        Serial.print("moving to index: ");
        int x = parcourX[pos + 1];
        Serial.println(x);
        // if (currentIndex != 0) {
        if (robotX == x && robotAngle == 0)
        {
            moveOneBlockForward(1);
            robotAngle = 0;
        }
        else if (robotX == x && robotAngle == 270)
        {
            perfectTurnRight();
            moveOneBlockForward(1);
            robotAngle = 0;
        }
        else if (robotX == x && robotAngle == 90)
        {
            perfectTurnLeft();
            moveOneBlockForward(1);
            robotAngle = 0;
        }
        else if (x == robotX - 1 && robotAngle == 270)
        {
            moveOneBlockForward(1);
            robotAngle = 270;
        }
        else if (x == robotX - 1 && robotAngle == 90)
        {
            moveOneBlockForward(1);
            robotAngle = 90;
        }
        else if (x == robotX - 1)
        {
            perfectTurnLeft();
            moveOneBlockForward(1);
            robotAngle = 270;
        }
        else if (x == robotX + 1)
        {
            perfectTurnRight();
            moveOneBlockForward(1);
            robotAngle = 90;
        }
        
        robotX = x;
        robotY = parcourY[pos + 1];

        Serial.print("the fuck is that (pos)");
        Serial.print(robotX);
        Serial.print(",");
        Serial.println(robotY);
}